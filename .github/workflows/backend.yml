name: Backend CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

jobs:
  backend-test:
    name: Backend tests
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8, 3.9]
    defaults:
      run:
        working-directory: backend

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install pipenv, libpq and ldap system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libpq-dev python3-dev libldap2-dev libsasl2-dev -y
          pip install tblib
          pip install pipenv
          pipenv --python ${{ matrix.python-version }}
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache
          key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('**/Pipfile.lock') }}
      - name: Cache virtualenv
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-py${{ matrix.python-version }}-venv-${{ hashFiles('**/Pipfile.lock') }}
      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true' || steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: pipenv install --dev
      - name: Run tests
        env:
          APP_SECRET_KEY: Sup3r!S3cr3t_R4nd0m/g3N3r4T3d.k3Y
          DATABASE_NAME: github_actions
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres
          DJANGO_SETTINGS_MODULE: core.settings.test
        run: |
          pipenv run python manage.py makemigrations --no-input
          pipenv run python manage.py migrate --no-input
          pipenv run python manage.py collectstatic --no-input --clear --link
          pipenv run coverage pytest
          pipenv run coverage report
          pipenv run coverage html
      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: backend/htmlcov/