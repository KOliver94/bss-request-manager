/* tslint:disable */
/* eslint-disable */
/**
 * BSS Request Manager API
 * REST API for Workflow Support System for managing video shooting, filming and live streaming requests of Budavári Schönherz Stúdió.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: kecskemety.oliver@simonyi.bme.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { CommentCreateUpdate } from '../models';
// @ts-ignore
import { CommentCreateUpdateRequest } from '../models';
// @ts-ignore
import { RequestExternalSchEventsCreateRequest } from '../models';
// @ts-ignore
import { RequestRetrieve } from '../models';
/**
 * ExternalApi - axios parameter creator
 * @export
 */
export const ExternalApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {number} requestId
     * @param {CommentCreateUpdateRequest} commentCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    externalSchEventsRequestsCommentsCreate: async (
      requestId: number,
      commentCreateUpdateRequest: CommentCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists(
        'externalSchEventsRequestsCommentsCreate',
        'requestId',
        requestId,
      );
      // verify required parameter 'commentCreateUpdateRequest' is not null or undefined
      assertParamExists(
        'externalSchEventsRequestsCommentsCreate',
        'commentCreateUpdateRequest',
        commentCreateUpdateRequest,
      );
      const localVarPath =
        `/api/v1/external/sch-events/requests/{request_id}/comments`.replace(
          `{${'request_id'}}`,
          encodeURIComponent(String(requestId)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        commentCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {RequestExternalSchEventsCreateRequest} requestExternalSchEventsCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    externalSchEventsRequestsCreate: async (
      requestExternalSchEventsCreateRequest: RequestExternalSchEventsCreateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestExternalSchEventsCreateRequest' is not null or undefined
      assertParamExists(
        'externalSchEventsRequestsCreate',
        'requestExternalSchEventsCreateRequest',
        requestExternalSchEventsCreateRequest,
      );
      const localVarPath = `/api/v1/external/sch-events/requests`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestExternalSchEventsCreateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    externalSchEventsRequestsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('externalSchEventsRequestsRetrieve', 'id', id);
      const localVarPath = `/api/v1/external/sch-events/requests/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ExternalApi - functional programming interface
 * @export
 */
export const ExternalApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ExternalApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} requestId
     * @param {CommentCreateUpdateRequest} commentCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async externalSchEventsRequestsCommentsCreate(
      requestId: number,
      commentCreateUpdateRequest: CommentCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CommentCreateUpdate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.externalSchEventsRequestsCommentsCreate(
          requestId,
          commentCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {RequestExternalSchEventsCreateRequest} requestExternalSchEventsCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async externalSchEventsRequestsCreate(
      requestExternalSchEventsCreateRequest: RequestExternalSchEventsCreateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RequestRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.externalSchEventsRequestsCreate(
          requestExternalSchEventsCreateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async externalSchEventsRequestsRetrieve(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RequestRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.externalSchEventsRequestsRetrieve(
          id,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * ExternalApi - factory interface
 * @export
 */
export const ExternalApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ExternalApiFp(configuration);
  return {
    /**
     *
     * @param {number} requestId
     * @param {CommentCreateUpdateRequest} commentCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    externalSchEventsRequestsCommentsCreate(
      requestId: number,
      commentCreateUpdateRequest: CommentCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<CommentCreateUpdate> {
      return localVarFp
        .externalSchEventsRequestsCommentsCreate(
          requestId,
          commentCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {RequestExternalSchEventsCreateRequest} requestExternalSchEventsCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    externalSchEventsRequestsCreate(
      requestExternalSchEventsCreateRequest: RequestExternalSchEventsCreateRequest,
      options?: any,
    ): AxiosPromise<RequestRetrieve> {
      return localVarFp
        .externalSchEventsRequestsCreate(
          requestExternalSchEventsCreateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    externalSchEventsRequestsRetrieve(
      id: number,
      options?: any,
    ): AxiosPromise<RequestRetrieve> {
      return localVarFp
        .externalSchEventsRequestsRetrieve(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ExternalApi - object-oriented interface
 * @export
 * @class ExternalApi
 * @extends {BaseAPI}
 */
export class ExternalApi extends BaseAPI {
  /**
   *
   * @param {number} requestId
   * @param {CommentCreateUpdateRequest} commentCreateUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExternalApi
   */
  public externalSchEventsRequestsCommentsCreate(
    requestId: number,
    commentCreateUpdateRequest: CommentCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return ExternalApiFp(this.configuration)
      .externalSchEventsRequestsCommentsCreate(
        requestId,
        commentCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RequestExternalSchEventsCreateRequest} requestExternalSchEventsCreateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExternalApi
   */
  public externalSchEventsRequestsCreate(
    requestExternalSchEventsCreateRequest: RequestExternalSchEventsCreateRequest,
    options?: AxiosRequestConfig,
  ) {
    return ExternalApiFp(this.configuration)
      .externalSchEventsRequestsCreate(
        requestExternalSchEventsCreateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExternalApi
   */
  public externalSchEventsRequestsRetrieve(
    id: number,
    options?: AxiosRequestConfig,
  ) {
    return ExternalApiFp(this.configuration)
      .externalSchEventsRequestsRetrieve(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
