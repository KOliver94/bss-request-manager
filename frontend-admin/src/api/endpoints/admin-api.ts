/* tslint:disable */
/* eslint-disable */
/**
 * BSS Request Manager API
 * REST API for Workflow Support System for managing video shooting, filming and live streaming requests of Budavári Schönherz Stúdió.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: kecskemety.oliver@simonyi.bme.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { BanUser } from '../models';
// @ts-ignore
import { BanUserRequest } from '../models';
// @ts-ignore
import { CommentAdminCreateUpdate } from '../models';
// @ts-ignore
import { CommentAdminCreateUpdateRequest } from '../models';
// @ts-ignore
import { CommentAdminListRetrieve } from '../models';
// @ts-ignore
import { CrewMemberAdminCreateUpdateRequest } from '../models';
// @ts-ignore
import { CrewMemberAdminListRetrieve } from '../models';
// @ts-ignore
import { History } from '../models';
// @ts-ignore
import { PaginatedRequestAdminListList } from '../models';
// @ts-ignore
import { PaginatedUserAdminListList } from '../models';
// @ts-ignore
import { PaginatedVideoAdminSearchList } from '../models';
// @ts-ignore
import { PatchedCommentAdminCreateUpdateRequest } from '../models';
// @ts-ignore
import { PatchedCrewMemberAdminCreateUpdateRequest } from '../models';
// @ts-ignore
import { PatchedRatingAdminCreateUpdateRequest } from '../models';
// @ts-ignore
import { PatchedRequestAdminUpdateRequest } from '../models';
// @ts-ignore
import { PatchedUserAdminDetailRequest } from '../models';
// @ts-ignore
import { PatchedVideoAdminCreateUpdateRequest } from '../models';
// @ts-ignore
import { RatingAdminCreateUpdate } from '../models';
// @ts-ignore
import { RatingAdminCreateUpdateRequest } from '../models';
// @ts-ignore
import { RatingAdminListRetrieve } from '../models';
// @ts-ignore
import { RequestAdminCreateRequest } from '../models';
// @ts-ignore
import { RequestAdminRetrieve } from '../models';
// @ts-ignore
import { RequestAdminUpdateRequest } from '../models';
// @ts-ignore
import { UserAdminDetail } from '../models';
// @ts-ignore
import { UserAdminDetailRequest } from '../models';
// @ts-ignore
import { UserAdminWorkedOn } from '../models';
// @ts-ignore
import { VideoAdminCreateUpdateRequest } from '../models';
// @ts-ignore
import { VideoAdminList } from '../models';
// @ts-ignore
import { VideoAdminRetrieve } from '../models';
/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {number} requestId
     * @param {CommentAdminCreateUpdateRequest} commentAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCommentsCreate: async (
      requestId: number,
      commentAdminCreateUpdateRequest: CommentAdminCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('adminRequestsCommentsCreate', 'requestId', requestId);
      // verify required parameter 'commentAdminCreateUpdateRequest' is not null or undefined
      assertParamExists(
        'adminRequestsCommentsCreate',
        'commentAdminCreateUpdateRequest',
        commentAdminCreateUpdateRequest,
      );
      const localVarPath =
        `/api/v1/admin/requests/{request_id}/comments`.replace(
          `{${'request_id'}}`,
          encodeURIComponent(String(requestId)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        commentAdminCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCommentsDestroy: async (
      id: number,
      requestId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsCommentsDestroy', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('adminRequestsCommentsDestroy', 'requestId', requestId);
      const localVarPath = `/api/v1/admin/requests/{request_id}/comments/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCommentsHistoryList: async (
      id: number,
      requestId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsCommentsHistoryList', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists(
        'adminRequestsCommentsHistoryList',
        'requestId',
        requestId,
      );
      const localVarPath =
        `/api/v1/admin/requests/{request_id}/comments/{id}/history`
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} requestId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCommentsList: async (
      requestId: number,
      ordering?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('adminRequestsCommentsList', 'requestId', requestId);
      const localVarPath =
        `/api/v1/admin/requests/{request_id}/comments`.replace(
          `{${'request_id'}}`,
          encodeURIComponent(String(requestId)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (ordering !== undefined) {
        localVarQueryParameter['ordering'] = ordering;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {PatchedCommentAdminCreateUpdateRequest} [patchedCommentAdminCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCommentsPartialUpdate: async (
      id: number,
      requestId: number,
      patchedCommentAdminCreateUpdateRequest?: PatchedCommentAdminCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsCommentsPartialUpdate', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists(
        'adminRequestsCommentsPartialUpdate',
        'requestId',
        requestId,
      );
      const localVarPath = `/api/v1/admin/requests/{request_id}/comments/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedCommentAdminCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCommentsRetrieve: async (
      id: number,
      requestId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsCommentsRetrieve', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists(
        'adminRequestsCommentsRetrieve',
        'requestId',
        requestId,
      );
      const localVarPath = `/api/v1/admin/requests/{request_id}/comments/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {CommentAdminCreateUpdateRequest} commentAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCommentsUpdate: async (
      id: number,
      requestId: number,
      commentAdminCreateUpdateRequest: CommentAdminCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsCommentsUpdate', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('adminRequestsCommentsUpdate', 'requestId', requestId);
      // verify required parameter 'commentAdminCreateUpdateRequest' is not null or undefined
      assertParamExists(
        'adminRequestsCommentsUpdate',
        'commentAdminCreateUpdateRequest',
        commentAdminCreateUpdateRequest,
      );
      const localVarPath = `/api/v1/admin/requests/{request_id}/comments/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        commentAdminCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {RequestAdminCreateRequest} requestAdminCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCreate: async (
      requestAdminCreateRequest: RequestAdminCreateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestAdminCreateRequest' is not null or undefined
      assertParamExists(
        'adminRequestsCreate',
        'requestAdminCreateRequest',
        requestAdminCreateRequest,
      );
      const localVarPath = `/api/v1/admin/requests`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestAdminCreateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} requestId
     * @param {CrewMemberAdminCreateUpdateRequest} crewMemberAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCrewCreate: async (
      requestId: number,
      crewMemberAdminCreateUpdateRequest: CrewMemberAdminCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('adminRequestsCrewCreate', 'requestId', requestId);
      // verify required parameter 'crewMemberAdminCreateUpdateRequest' is not null or undefined
      assertParamExists(
        'adminRequestsCrewCreate',
        'crewMemberAdminCreateUpdateRequest',
        crewMemberAdminCreateUpdateRequest,
      );
      const localVarPath = `/api/v1/admin/requests/{request_id}/crew`.replace(
        `{${'request_id'}}`,
        encodeURIComponent(String(requestId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        crewMemberAdminCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this crew member.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCrewDestroy: async (
      id: number,
      requestId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsCrewDestroy', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('adminRequestsCrewDestroy', 'requestId', requestId);
      const localVarPath = `/api/v1/admin/requests/{request_id}/crew/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} requestId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCrewList: async (
      requestId: number,
      ordering?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('adminRequestsCrewList', 'requestId', requestId);
      const localVarPath = `/api/v1/admin/requests/{request_id}/crew`.replace(
        `{${'request_id'}}`,
        encodeURIComponent(String(requestId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (ordering !== undefined) {
        localVarQueryParameter['ordering'] = ordering;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this crew member.
     * @param {number} requestId
     * @param {PatchedCrewMemberAdminCreateUpdateRequest} [patchedCrewMemberAdminCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCrewPartialUpdate: async (
      id: number,
      requestId: number,
      patchedCrewMemberAdminCreateUpdateRequest?: PatchedCrewMemberAdminCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsCrewPartialUpdate', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists(
        'adminRequestsCrewPartialUpdate',
        'requestId',
        requestId,
      );
      const localVarPath = `/api/v1/admin/requests/{request_id}/crew/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedCrewMemberAdminCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this crew member.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCrewRetrieve: async (
      id: number,
      requestId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsCrewRetrieve', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('adminRequestsCrewRetrieve', 'requestId', requestId);
      const localVarPath = `/api/v1/admin/requests/{request_id}/crew/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this crew member.
     * @param {number} requestId
     * @param {CrewMemberAdminCreateUpdateRequest} crewMemberAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCrewUpdate: async (
      id: number,
      requestId: number,
      crewMemberAdminCreateUpdateRequest: CrewMemberAdminCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsCrewUpdate', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('adminRequestsCrewUpdate', 'requestId', requestId);
      // verify required parameter 'crewMemberAdminCreateUpdateRequest' is not null or undefined
      assertParamExists(
        'adminRequestsCrewUpdate',
        'crewMemberAdminCreateUpdateRequest',
        crewMemberAdminCreateUpdateRequest,
      );
      const localVarPath = `/api/v1/admin/requests/{request_id}/crew/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        crewMemberAdminCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsDestroy: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsDestroy', 'id', id);
      const localVarPath = `/api/v1/admin/requests/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsHistoryList: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsHistoryList', 'id', id);
      const localVarPath = `/api/v1/admin/requests/{id}/history`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [deadlineAfter]
     * @param {string} [deadlineBefore]
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {boolean} [pagination] Return paginated response.
     * @param {string} [search] A search term.
     * @param {string} [startDatetimeAfter]
     * @param {string} [startDatetimeBefore]
     * @param {Array<AdminRequestsListStatusEnum>} [status] * &#x60;0&#x60; - Elutasítva * &#x60;1&#x60; - Felkérés * &#x60;2&#x60; - Elvállalva * &#x60;3&#x60; - Leforgatva * &#x60;4&#x60; - Beírva * &#x60;5&#x60; - Megvágva * &#x60;6&#x60; - Archiválva * &#x60;7&#x60; - Lezárva * &#x60;9&#x60; - Szervezők által lemondva * &#x60;10&#x60; - Meghiúsult
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsList: async (
      deadlineAfter?: string,
      deadlineBefore?: string,
      ordering?: string,
      page?: number,
      pageSize?: number,
      pagination?: boolean,
      search?: string,
      startDatetimeAfter?: string,
      startDatetimeBefore?: string,
      status?: Array<AdminRequestsListStatusEnum>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/admin/requests`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (deadlineAfter !== undefined) {
        localVarQueryParameter['deadline_after'] =
          (deadlineAfter as any) instanceof Date
            ? (deadlineAfter as any).toISOString().substring(0, 10)
            : deadlineAfter;
      }

      if (deadlineBefore !== undefined) {
        localVarQueryParameter['deadline_before'] =
          (deadlineBefore as any) instanceof Date
            ? (deadlineBefore as any).toISOString().substring(0, 10)
            : deadlineBefore;
      }

      if (ordering !== undefined) {
        localVarQueryParameter['ordering'] = ordering;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['page_size'] = pageSize;
      }

      if (pagination !== undefined) {
        localVarQueryParameter['pagination'] = pagination;
      }

      if (search !== undefined) {
        localVarQueryParameter['search'] = search;
      }

      if (startDatetimeAfter !== undefined) {
        localVarQueryParameter['start_datetime_after'] =
          (startDatetimeAfter as any) instanceof Date
            ? (startDatetimeAfter as any).toISOString().substring(0, 10)
            : startDatetimeAfter;
      }

      if (startDatetimeBefore !== undefined) {
        localVarQueryParameter['start_datetime_before'] =
          (startDatetimeBefore as any) instanceof Date
            ? (startDatetimeBefore as any).toISOString().substring(0, 10)
            : startDatetimeBefore;
      }

      if (status) {
        localVarQueryParameter['status'] = status;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {PatchedRequestAdminUpdateRequest} [patchedRequestAdminUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsPartialUpdate: async (
      id: number,
      patchedRequestAdminUpdateRequest?: PatchedRequestAdminUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsPartialUpdate', 'id', id);
      const localVarPath = `/api/v1/admin/requests/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedRequestAdminUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsRetrieve', 'id', id);
      const localVarPath = `/api/v1/admin/requests/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {RequestAdminUpdateRequest} requestAdminUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsUpdate: async (
      id: number,
      requestAdminUpdateRequest: RequestAdminUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsUpdate', 'id', id);
      // verify required parameter 'requestAdminUpdateRequest' is not null or undefined
      assertParamExists(
        'adminRequestsUpdate',
        'requestAdminUpdateRequest',
        requestAdminUpdateRequest,
      );
      const localVarPath = `/api/v1/admin/requests/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestAdminUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} requestId
     * @param {VideoAdminCreateUpdateRequest} videoAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosCreate: async (
      requestId: number,
      videoAdminCreateUpdateRequest: VideoAdminCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('adminRequestsVideosCreate', 'requestId', requestId);
      // verify required parameter 'videoAdminCreateUpdateRequest' is not null or undefined
      assertParamExists(
        'adminRequestsVideosCreate',
        'videoAdminCreateUpdateRequest',
        videoAdminCreateUpdateRequest,
      );
      const localVarPath = `/api/v1/admin/requests/{request_id}/videos`.replace(
        `{${'request_id'}}`,
        encodeURIComponent(String(requestId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        videoAdminCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosDestroy: async (
      id: number,
      requestId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsVideosDestroy', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('adminRequestsVideosDestroy', 'requestId', requestId);
      const localVarPath = `/api/v1/admin/requests/{request_id}/videos/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosHistoryList: async (
      id: number,
      requestId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsVideosHistoryList', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists(
        'adminRequestsVideosHistoryList',
        'requestId',
        requestId,
      );
      const localVarPath =
        `/api/v1/admin/requests/{request_id}/videos/{id}/history`
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} requestId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosList: async (
      requestId: number,
      ordering?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('adminRequestsVideosList', 'requestId', requestId);
      const localVarPath = `/api/v1/admin/requests/{request_id}/videos`.replace(
        `{${'request_id'}}`,
        encodeURIComponent(String(requestId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (ordering !== undefined) {
        localVarQueryParameter['ordering'] = ordering;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {PatchedVideoAdminCreateUpdateRequest} [patchedVideoAdminCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosPartialUpdate: async (
      id: number,
      requestId: number,
      patchedVideoAdminCreateUpdateRequest?: PatchedVideoAdminCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsVideosPartialUpdate', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists(
        'adminRequestsVideosPartialUpdate',
        'requestId',
        requestId,
      );
      const localVarPath = `/api/v1/admin/requests/{request_id}/videos/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedVideoAdminCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {RatingAdminCreateUpdateRequest} ratingAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRatingsCreate: async (
      requestId: number,
      videoId: number,
      ratingAdminCreateUpdateRequest: RatingAdminCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists(
        'adminRequestsVideosRatingsCreate',
        'requestId',
        requestId,
      );
      // verify required parameter 'videoId' is not null or undefined
      assertParamExists('adminRequestsVideosRatingsCreate', 'videoId', videoId);
      // verify required parameter 'ratingAdminCreateUpdateRequest' is not null or undefined
      assertParamExists(
        'adminRequestsVideosRatingsCreate',
        'ratingAdminCreateUpdateRequest',
        ratingAdminCreateUpdateRequest,
      );
      const localVarPath =
        `/api/v1/admin/requests/{request_id}/videos/{video_id}/ratings`
          .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)))
          .replace(`{${'video_id'}}`, encodeURIComponent(String(videoId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        ratingAdminCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this rating.
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRatingsDestroy: async (
      id: number,
      requestId: number,
      videoId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsVideosRatingsDestroy', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists(
        'adminRequestsVideosRatingsDestroy',
        'requestId',
        requestId,
      );
      // verify required parameter 'videoId' is not null or undefined
      assertParamExists(
        'adminRequestsVideosRatingsDestroy',
        'videoId',
        videoId,
      );
      const localVarPath =
        `/api/v1/admin/requests/{request_id}/videos/{video_id}/ratings/{id}`
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)))
          .replace(`{${'video_id'}}`, encodeURIComponent(String(videoId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this rating.
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRatingsHistoryList: async (
      id: number,
      requestId: number,
      videoId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsVideosRatingsHistoryList', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists(
        'adminRequestsVideosRatingsHistoryList',
        'requestId',
        requestId,
      );
      // verify required parameter 'videoId' is not null or undefined
      assertParamExists(
        'adminRequestsVideosRatingsHistoryList',
        'videoId',
        videoId,
      );
      const localVarPath =
        `/api/v1/admin/requests/{request_id}/videos/{video_id}/ratings/{id}/history`
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)))
          .replace(`{${'video_id'}}`, encodeURIComponent(String(videoId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRatingsList: async (
      requestId: number,
      videoId: number,
      ordering?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists(
        'adminRequestsVideosRatingsList',
        'requestId',
        requestId,
      );
      // verify required parameter 'videoId' is not null or undefined
      assertParamExists('adminRequestsVideosRatingsList', 'videoId', videoId);
      const localVarPath =
        `/api/v1/admin/requests/{request_id}/videos/{video_id}/ratings`
          .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)))
          .replace(`{${'video_id'}}`, encodeURIComponent(String(videoId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (ordering !== undefined) {
        localVarQueryParameter['ordering'] = ordering;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRatingsOwnRetrieve: async (
      requestId: number,
      videoId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists(
        'adminRequestsVideosRatingsOwnRetrieve',
        'requestId',
        requestId,
      );
      // verify required parameter 'videoId' is not null or undefined
      assertParamExists(
        'adminRequestsVideosRatingsOwnRetrieve',
        'videoId',
        videoId,
      );
      const localVarPath =
        `/api/v1/admin/requests/{request_id}/videos/{video_id}/ratings/own`
          .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)))
          .replace(`{${'video_id'}}`, encodeURIComponent(String(videoId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this rating.
     * @param {number} requestId
     * @param {number} videoId
     * @param {PatchedRatingAdminCreateUpdateRequest} [patchedRatingAdminCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRatingsPartialUpdate: async (
      id: number,
      requestId: number,
      videoId: number,
      patchedRatingAdminCreateUpdateRequest?: PatchedRatingAdminCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsVideosRatingsPartialUpdate', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists(
        'adminRequestsVideosRatingsPartialUpdate',
        'requestId',
        requestId,
      );
      // verify required parameter 'videoId' is not null or undefined
      assertParamExists(
        'adminRequestsVideosRatingsPartialUpdate',
        'videoId',
        videoId,
      );
      const localVarPath =
        `/api/v1/admin/requests/{request_id}/videos/{video_id}/ratings/{id}`
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)))
          .replace(`{${'video_id'}}`, encodeURIComponent(String(videoId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedRatingAdminCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this rating.
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRatingsRetrieve: async (
      id: number,
      requestId: number,
      videoId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsVideosRatingsRetrieve', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists(
        'adminRequestsVideosRatingsRetrieve',
        'requestId',
        requestId,
      );
      // verify required parameter 'videoId' is not null or undefined
      assertParamExists(
        'adminRequestsVideosRatingsRetrieve',
        'videoId',
        videoId,
      );
      const localVarPath =
        `/api/v1/admin/requests/{request_id}/videos/{video_id}/ratings/{id}`
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)))
          .replace(`{${'video_id'}}`, encodeURIComponent(String(videoId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this rating.
     * @param {number} requestId
     * @param {number} videoId
     * @param {RatingAdminCreateUpdateRequest} ratingAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRatingsUpdate: async (
      id: number,
      requestId: number,
      videoId: number,
      ratingAdminCreateUpdateRequest: RatingAdminCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsVideosRatingsUpdate', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists(
        'adminRequestsVideosRatingsUpdate',
        'requestId',
        requestId,
      );
      // verify required parameter 'videoId' is not null or undefined
      assertParamExists('adminRequestsVideosRatingsUpdate', 'videoId', videoId);
      // verify required parameter 'ratingAdminCreateUpdateRequest' is not null or undefined
      assertParamExists(
        'adminRequestsVideosRatingsUpdate',
        'ratingAdminCreateUpdateRequest',
        ratingAdminCreateUpdateRequest,
      );
      const localVarPath =
        `/api/v1/admin/requests/{request_id}/videos/{video_id}/ratings/{id}`
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)))
          .replace(`{${'video_id'}}`, encodeURIComponent(String(videoId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        ratingAdminCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRetrieve: async (
      id: number,
      requestId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsVideosRetrieve', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('adminRequestsVideosRetrieve', 'requestId', requestId);
      const localVarPath = `/api/v1/admin/requests/{request_id}/videos/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {VideoAdminCreateUpdateRequest} videoAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosUpdate: async (
      id: number,
      requestId: number,
      videoAdminCreateUpdateRequest: VideoAdminCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminRequestsVideosUpdate', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('adminRequestsVideosUpdate', 'requestId', requestId);
      // verify required parameter 'videoAdminCreateUpdateRequest' is not null or undefined
      assertParamExists(
        'adminRequestsVideosUpdate',
        'videoAdminCreateUpdateRequest',
        videoAdminCreateUpdateRequest,
      );
      const localVarPath = `/api/v1/admin/requests/{request_id}/videos/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        videoAdminCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {BanUserRequest} [banUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersBanCreate: async (
      id: number,
      banUserRequest?: BanUserRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminUsersBanCreate', 'id', id);
      const localVarPath = `/api/v1/admin/users/{id}/ban`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        banUserRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersBanDestroy: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminUsersBanDestroy', 'id', id);
      const localVarPath = `/api/v1/admin/users/{id}/ban`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {boolean} [isAdmin]
     * @param {boolean} [isStaff]
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {boolean} [pagination] Return paginated response.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersList: async (
      isAdmin?: boolean,
      isStaff?: boolean,
      ordering?: string,
      page?: number,
      pageSize?: number,
      pagination?: boolean,
      search?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/admin/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (isAdmin !== undefined) {
        localVarQueryParameter['is_admin'] = isAdmin;
      }

      if (isStaff !== undefined) {
        localVarQueryParameter['is_staff'] = isStaff;
      }

      if (ordering !== undefined) {
        localVarQueryParameter['ordering'] = ordering;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['page_size'] = pageSize;
      }

      if (pagination !== undefined) {
        localVarQueryParameter['pagination'] = pagination;
      }

      if (search !== undefined) {
        localVarQueryParameter['search'] = search;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {PatchedUserAdminDetailRequest} [patchedUserAdminDetailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersPartialUpdate: async (
      id: number,
      patchedUserAdminDetailRequest?: PatchedUserAdminDetailRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminUsersPartialUpdate', 'id', id);
      const localVarPath = `/api/v1/admin/users/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedUserAdminDetailRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminUsersRetrieve', 'id', id);
      const localVarPath = `/api/v1/admin/users/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {UserAdminDetailRequest} userAdminDetailRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersUpdate: async (
      id: number,
      userAdminDetailRequest: UserAdminDetailRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminUsersUpdate', 'id', id);
      // verify required parameter 'userAdminDetailRequest' is not null or undefined
      assertParamExists(
        'adminUsersUpdate',
        'userAdminDetailRequest',
        userAdminDetailRequest,
      );
      const localVarPath = `/api/v1/admin/users/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userAdminDetailRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {boolean} [isResponsible] Default is True.
     * @param {string} [startDatetimeAfter] Default is 20 weeks before start_datetime_before.
     * @param {string} [startDatetimeBefore] Default is today.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersWorkedOnList: async (
      id: number,
      isResponsible?: boolean,
      startDatetimeAfter?: string,
      startDatetimeBefore?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminUsersWorkedOnList', 'id', id);
      const localVarPath = `/api/v1/admin/users/{id}/worked_on`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (isResponsible !== undefined) {
        localVarQueryParameter['is_responsible'] = isResponsible;
      }

      if (startDatetimeAfter !== undefined) {
        localVarQueryParameter['start_datetime_after'] =
          (startDatetimeAfter as any) instanceof Date
            ? (startDatetimeAfter as any).toISOString().substring(0, 10)
            : startDatetimeAfter;
      }

      if (startDatetimeBefore !== undefined) {
        localVarQueryParameter['start_datetime_before'] =
          (startDatetimeBefore as any) instanceof Date
            ? (startDatetimeBefore as any).toISOString().substring(0, 10)
            : startDatetimeBefore;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [lastAired]
     * @param {number} [lengthMax]
     * @param {number} [lengthMin]
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {boolean} [pagination] Return paginated response.
     * @param {string} [requestStartDatetimeAfter]
     * @param {string} [requestStartDatetimeBefore]
     * @param {string} [search] A search term.
     * @param {Array<AdminVideosListStatusEnum>} [status] * &#x60;1&#x60; - Vágásra vár * &#x60;2&#x60; - Vágás alatt * &#x60;3&#x60; - Megvágva * &#x60;4&#x60; - Kikódolva * &#x60;5&#x60; - Közzétéve * &#x60;6&#x60; - Lezárva
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminVideosList: async (
      lastAired?: string,
      lengthMax?: number,
      lengthMin?: number,
      ordering?: string,
      page?: number,
      pageSize?: number,
      pagination?: boolean,
      requestStartDatetimeAfter?: string,
      requestStartDatetimeBefore?: string,
      search?: string,
      status?: Array<AdminVideosListStatusEnum>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/admin/videos`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (lastAired !== undefined) {
        localVarQueryParameter['last_aired'] =
          (lastAired as any) instanceof Date
            ? (lastAired as any).toISOString().substring(0, 10)
            : lastAired;
      }

      if (lengthMax !== undefined) {
        localVarQueryParameter['length_max'] = lengthMax;
      }

      if (lengthMin !== undefined) {
        localVarQueryParameter['length_min'] = lengthMin;
      }

      if (ordering !== undefined) {
        localVarQueryParameter['ordering'] = ordering;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['page_size'] = pageSize;
      }

      if (pagination !== undefined) {
        localVarQueryParameter['pagination'] = pagination;
      }

      if (requestStartDatetimeAfter !== undefined) {
        localVarQueryParameter['request_start_datetime_after'] =
          (requestStartDatetimeAfter as any) instanceof Date
            ? (requestStartDatetimeAfter as any).toISOString().substring(0, 10)
            : requestStartDatetimeAfter;
      }

      if (requestStartDatetimeBefore !== undefined) {
        localVarQueryParameter['request_start_datetime_before'] =
          (requestStartDatetimeBefore as any) instanceof Date
            ? (requestStartDatetimeBefore as any).toISOString().substring(0, 10)
            : requestStartDatetimeBefore;
      }

      if (search !== undefined) {
        localVarQueryParameter['search'] = search;
      }

      if (status) {
        localVarQueryParameter['status'] = status;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} requestId
     * @param {CommentAdminCreateUpdateRequest} commentAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsCommentsCreate(
      requestId: number,
      commentAdminCreateUpdateRequest: CommentAdminCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CommentAdminCreateUpdate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsCommentsCreate(
          requestId,
          commentAdminCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsCommentsDestroy(
      id: number,
      requestId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsCommentsDestroy(
          id,
          requestId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsCommentsHistoryList(
      id: number,
      requestId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<History>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsCommentsHistoryList(
          id,
          requestId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} requestId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsCommentsList(
      requestId: number,
      ordering?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<CommentAdminListRetrieve>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsCommentsList(
          requestId,
          ordering,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {PatchedCommentAdminCreateUpdateRequest} [patchedCommentAdminCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsCommentsPartialUpdate(
      id: number,
      requestId: number,
      patchedCommentAdminCreateUpdateRequest?: PatchedCommentAdminCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CommentAdminCreateUpdate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsCommentsPartialUpdate(
          id,
          requestId,
          patchedCommentAdminCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsCommentsRetrieve(
      id: number,
      requestId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CommentAdminListRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsCommentsRetrieve(
          id,
          requestId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {CommentAdminCreateUpdateRequest} commentAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsCommentsUpdate(
      id: number,
      requestId: number,
      commentAdminCreateUpdateRequest: CommentAdminCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CommentAdminCreateUpdate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsCommentsUpdate(
          id,
          requestId,
          commentAdminCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {RequestAdminCreateRequest} requestAdminCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsCreate(
      requestAdminCreateRequest: RequestAdminCreateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RequestAdminRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsCreate(
          requestAdminCreateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} requestId
     * @param {CrewMemberAdminCreateUpdateRequest} crewMemberAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsCrewCreate(
      requestId: number,
      crewMemberAdminCreateUpdateRequest: CrewMemberAdminCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CrewMemberAdminListRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsCrewCreate(
          requestId,
          crewMemberAdminCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this crew member.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsCrewDestroy(
      id: number,
      requestId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsCrewDestroy(
          id,
          requestId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} requestId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsCrewList(
      requestId: number,
      ordering?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<CrewMemberAdminListRetrieve>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsCrewList(
          requestId,
          ordering,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this crew member.
     * @param {number} requestId
     * @param {PatchedCrewMemberAdminCreateUpdateRequest} [patchedCrewMemberAdminCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsCrewPartialUpdate(
      id: number,
      requestId: number,
      patchedCrewMemberAdminCreateUpdateRequest?: PatchedCrewMemberAdminCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CrewMemberAdminListRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsCrewPartialUpdate(
          id,
          requestId,
          patchedCrewMemberAdminCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this crew member.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsCrewRetrieve(
      id: number,
      requestId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CrewMemberAdminListRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsCrewRetrieve(
          id,
          requestId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this crew member.
     * @param {number} requestId
     * @param {CrewMemberAdminCreateUpdateRequest} crewMemberAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsCrewUpdate(
      id: number,
      requestId: number,
      crewMemberAdminCreateUpdateRequest: CrewMemberAdminCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CrewMemberAdminListRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsCrewUpdate(
          id,
          requestId,
          crewMemberAdminCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsDestroy(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsDestroy(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsHistoryList(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<History>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsHistoryList(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} [deadlineAfter]
     * @param {string} [deadlineBefore]
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {boolean} [pagination] Return paginated response.
     * @param {string} [search] A search term.
     * @param {string} [startDatetimeAfter]
     * @param {string} [startDatetimeBefore]
     * @param {Array<AdminRequestsListStatusEnum>} [status] * &#x60;0&#x60; - Elutasítva * &#x60;1&#x60; - Felkérés * &#x60;2&#x60; - Elvállalva * &#x60;3&#x60; - Leforgatva * &#x60;4&#x60; - Beírva * &#x60;5&#x60; - Megvágva * &#x60;6&#x60; - Archiválva * &#x60;7&#x60; - Lezárva * &#x60;9&#x60; - Szervezők által lemondva * &#x60;10&#x60; - Meghiúsult
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsList(
      deadlineAfter?: string,
      deadlineBefore?: string,
      ordering?: string,
      page?: number,
      pageSize?: number,
      pagination?: boolean,
      search?: string,
      startDatetimeAfter?: string,
      startDatetimeBefore?: string,
      status?: Array<AdminRequestsListStatusEnum>,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedRequestAdminListList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsList(
          deadlineAfter,
          deadlineBefore,
          ordering,
          page,
          pageSize,
          pagination,
          search,
          startDatetimeAfter,
          startDatetimeBefore,
          status,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {PatchedRequestAdminUpdateRequest} [patchedRequestAdminUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsPartialUpdate(
      id: number,
      patchedRequestAdminUpdateRequest?: PatchedRequestAdminUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RequestAdminRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsPartialUpdate(
          id,
          patchedRequestAdminUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsRetrieve(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RequestAdminRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsRetrieve(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {RequestAdminUpdateRequest} requestAdminUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsUpdate(
      id: number,
      requestAdminUpdateRequest: RequestAdminUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RequestAdminRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsUpdate(
          id,
          requestAdminUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} requestId
     * @param {VideoAdminCreateUpdateRequest} videoAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsVideosCreate(
      requestId: number,
      videoAdminCreateUpdateRequest: VideoAdminCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<VideoAdminRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsVideosCreate(
          requestId,
          videoAdminCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsVideosDestroy(
      id: number,
      requestId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsVideosDestroy(
          id,
          requestId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsVideosHistoryList(
      id: number,
      requestId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<History>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsVideosHistoryList(
          id,
          requestId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} requestId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsVideosList(
      requestId: number,
      ordering?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<VideoAdminList>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsVideosList(
          requestId,
          ordering,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {PatchedVideoAdminCreateUpdateRequest} [patchedVideoAdminCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsVideosPartialUpdate(
      id: number,
      requestId: number,
      patchedVideoAdminCreateUpdateRequest?: PatchedVideoAdminCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<VideoAdminRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsVideosPartialUpdate(
          id,
          requestId,
          patchedVideoAdminCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {RatingAdminCreateUpdateRequest} ratingAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsVideosRatingsCreate(
      requestId: number,
      videoId: number,
      ratingAdminCreateUpdateRequest: RatingAdminCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RatingAdminCreateUpdate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsVideosRatingsCreate(
          requestId,
          videoId,
          ratingAdminCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this rating.
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsVideosRatingsDestroy(
      id: number,
      requestId: number,
      videoId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsVideosRatingsDestroy(
          id,
          requestId,
          videoId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this rating.
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsVideosRatingsHistoryList(
      id: number,
      requestId: number,
      videoId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<History>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsVideosRatingsHistoryList(
          id,
          requestId,
          videoId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsVideosRatingsList(
      requestId: number,
      videoId: number,
      ordering?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<RatingAdminListRetrieve>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsVideosRatingsList(
          requestId,
          videoId,
          ordering,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsVideosRatingsOwnRetrieve(
      requestId: number,
      videoId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RatingAdminListRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsVideosRatingsOwnRetrieve(
          requestId,
          videoId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this rating.
     * @param {number} requestId
     * @param {number} videoId
     * @param {PatchedRatingAdminCreateUpdateRequest} [patchedRatingAdminCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsVideosRatingsPartialUpdate(
      id: number,
      requestId: number,
      videoId: number,
      patchedRatingAdminCreateUpdateRequest?: PatchedRatingAdminCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RatingAdminCreateUpdate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsVideosRatingsPartialUpdate(
          id,
          requestId,
          videoId,
          patchedRatingAdminCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this rating.
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsVideosRatingsRetrieve(
      id: number,
      requestId: number,
      videoId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RatingAdminListRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsVideosRatingsRetrieve(
          id,
          requestId,
          videoId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this rating.
     * @param {number} requestId
     * @param {number} videoId
     * @param {RatingAdminCreateUpdateRequest} ratingAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsVideosRatingsUpdate(
      id: number,
      requestId: number,
      videoId: number,
      ratingAdminCreateUpdateRequest: RatingAdminCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RatingAdminCreateUpdate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsVideosRatingsUpdate(
          id,
          requestId,
          videoId,
          ratingAdminCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsVideosRetrieve(
      id: number,
      requestId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<VideoAdminRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsVideosRetrieve(
          id,
          requestId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {VideoAdminCreateUpdateRequest} videoAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminRequestsVideosUpdate(
      id: number,
      requestId: number,
      videoAdminCreateUpdateRequest: VideoAdminCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<VideoAdminRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminRequestsVideosUpdate(
          id,
          requestId,
          videoAdminCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {BanUserRequest} [banUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminUsersBanCreate(
      id: number,
      banUserRequest?: BanUserRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BanUser>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminUsersBanCreate(
          id,
          banUserRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminUsersBanDestroy(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminUsersBanDestroy(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {boolean} [isAdmin]
     * @param {boolean} [isStaff]
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {boolean} [pagination] Return paginated response.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminUsersList(
      isAdmin?: boolean,
      isStaff?: boolean,
      ordering?: string,
      page?: number,
      pageSize?: number,
      pagination?: boolean,
      search?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedUserAdminListList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.adminUsersList(
        isAdmin,
        isStaff,
        ordering,
        page,
        pageSize,
        pagination,
        search,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {PatchedUserAdminDetailRequest} [patchedUserAdminDetailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminUsersPartialUpdate(
      id: number,
      patchedUserAdminDetailRequest?: PatchedUserAdminDetailRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserAdminDetail>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminUsersPartialUpdate(
          id,
          patchedUserAdminDetailRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminUsersRetrieve(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserAdminDetail>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminUsersRetrieve(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {UserAdminDetailRequest} userAdminDetailRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminUsersUpdate(
      id: number,
      userAdminDetailRequest: UserAdminDetailRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserAdminDetail>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminUsersUpdate(
          id,
          userAdminDetailRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {boolean} [isResponsible] Default is True.
     * @param {string} [startDatetimeAfter] Default is 20 weeks before start_datetime_before.
     * @param {string} [startDatetimeBefore] Default is today.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminUsersWorkedOnList(
      id: number,
      isResponsible?: boolean,
      startDatetimeAfter?: string,
      startDatetimeBefore?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<UserAdminWorkedOn>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminUsersWorkedOnList(
          id,
          isResponsible,
          startDatetimeAfter,
          startDatetimeBefore,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} [lastAired]
     * @param {number} [lengthMax]
     * @param {number} [lengthMin]
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {boolean} [pagination] Return paginated response.
     * @param {string} [requestStartDatetimeAfter]
     * @param {string} [requestStartDatetimeBefore]
     * @param {string} [search] A search term.
     * @param {Array<AdminVideosListStatusEnum>} [status] * &#x60;1&#x60; - Vágásra vár * &#x60;2&#x60; - Vágás alatt * &#x60;3&#x60; - Megvágva * &#x60;4&#x60; - Kikódolva * &#x60;5&#x60; - Közzétéve * &#x60;6&#x60; - Lezárva
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminVideosList(
      lastAired?: string,
      lengthMax?: number,
      lengthMin?: number,
      ordering?: string,
      page?: number,
      pageSize?: number,
      pagination?: boolean,
      requestStartDatetimeAfter?: string,
      requestStartDatetimeBefore?: string,
      search?: string,
      status?: Array<AdminVideosListStatusEnum>,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedVideoAdminSearchList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.adminVideosList(
        lastAired,
        lengthMax,
        lengthMin,
        ordering,
        page,
        pageSize,
        pagination,
        requestStartDatetimeAfter,
        requestStartDatetimeBefore,
        search,
        status,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AdminApiFp(configuration);
  return {
    /**
     *
     * @param {number} requestId
     * @param {CommentAdminCreateUpdateRequest} commentAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCommentsCreate(
      requestId: number,
      commentAdminCreateUpdateRequest: CommentAdminCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<CommentAdminCreateUpdate> {
      return localVarFp
        .adminRequestsCommentsCreate(
          requestId,
          commentAdminCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCommentsDestroy(
      id: number,
      requestId: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .adminRequestsCommentsDestroy(id, requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCommentsHistoryList(
      id: number,
      requestId: number,
      options?: any,
    ): AxiosPromise<Array<History>> {
      return localVarFp
        .adminRequestsCommentsHistoryList(id, requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} requestId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCommentsList(
      requestId: number,
      ordering?: string,
      options?: any,
    ): AxiosPromise<Array<CommentAdminListRetrieve>> {
      return localVarFp
        .adminRequestsCommentsList(requestId, ordering, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {PatchedCommentAdminCreateUpdateRequest} [patchedCommentAdminCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCommentsPartialUpdate(
      id: number,
      requestId: number,
      patchedCommentAdminCreateUpdateRequest?: PatchedCommentAdminCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<CommentAdminCreateUpdate> {
      return localVarFp
        .adminRequestsCommentsPartialUpdate(
          id,
          requestId,
          patchedCommentAdminCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCommentsRetrieve(
      id: number,
      requestId: number,
      options?: any,
    ): AxiosPromise<CommentAdminListRetrieve> {
      return localVarFp
        .adminRequestsCommentsRetrieve(id, requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {CommentAdminCreateUpdateRequest} commentAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCommentsUpdate(
      id: number,
      requestId: number,
      commentAdminCreateUpdateRequest: CommentAdminCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<CommentAdminCreateUpdate> {
      return localVarFp
        .adminRequestsCommentsUpdate(
          id,
          requestId,
          commentAdminCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {RequestAdminCreateRequest} requestAdminCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCreate(
      requestAdminCreateRequest: RequestAdminCreateRequest,
      options?: any,
    ): AxiosPromise<RequestAdminRetrieve> {
      return localVarFp
        .adminRequestsCreate(requestAdminCreateRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} requestId
     * @param {CrewMemberAdminCreateUpdateRequest} crewMemberAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCrewCreate(
      requestId: number,
      crewMemberAdminCreateUpdateRequest: CrewMemberAdminCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<CrewMemberAdminListRetrieve> {
      return localVarFp
        .adminRequestsCrewCreate(
          requestId,
          crewMemberAdminCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this crew member.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCrewDestroy(
      id: number,
      requestId: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .adminRequestsCrewDestroy(id, requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} requestId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCrewList(
      requestId: number,
      ordering?: string,
      options?: any,
    ): AxiosPromise<Array<CrewMemberAdminListRetrieve>> {
      return localVarFp
        .adminRequestsCrewList(requestId, ordering, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this crew member.
     * @param {number} requestId
     * @param {PatchedCrewMemberAdminCreateUpdateRequest} [patchedCrewMemberAdminCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCrewPartialUpdate(
      id: number,
      requestId: number,
      patchedCrewMemberAdminCreateUpdateRequest?: PatchedCrewMemberAdminCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<CrewMemberAdminListRetrieve> {
      return localVarFp
        .adminRequestsCrewPartialUpdate(
          id,
          requestId,
          patchedCrewMemberAdminCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this crew member.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCrewRetrieve(
      id: number,
      requestId: number,
      options?: any,
    ): AxiosPromise<CrewMemberAdminListRetrieve> {
      return localVarFp
        .adminRequestsCrewRetrieve(id, requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this crew member.
     * @param {number} requestId
     * @param {CrewMemberAdminCreateUpdateRequest} crewMemberAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsCrewUpdate(
      id: number,
      requestId: number,
      crewMemberAdminCreateUpdateRequest: CrewMemberAdminCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<CrewMemberAdminListRetrieve> {
      return localVarFp
        .adminRequestsCrewUpdate(
          id,
          requestId,
          crewMemberAdminCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsDestroy(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .adminRequestsDestroy(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsHistoryList(
      id: number,
      options?: any,
    ): AxiosPromise<Array<History>> {
      return localVarFp
        .adminRequestsHistoryList(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [deadlineAfter]
     * @param {string} [deadlineBefore]
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {boolean} [pagination] Return paginated response.
     * @param {string} [search] A search term.
     * @param {string} [startDatetimeAfter]
     * @param {string} [startDatetimeBefore]
     * @param {Array<AdminRequestsListStatusEnum>} [status] * &#x60;0&#x60; - Elutasítva * &#x60;1&#x60; - Felkérés * &#x60;2&#x60; - Elvállalva * &#x60;3&#x60; - Leforgatva * &#x60;4&#x60; - Beírva * &#x60;5&#x60; - Megvágva * &#x60;6&#x60; - Archiválva * &#x60;7&#x60; - Lezárva * &#x60;9&#x60; - Szervezők által lemondva * &#x60;10&#x60; - Meghiúsult
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsList(
      deadlineAfter?: string,
      deadlineBefore?: string,
      ordering?: string,
      page?: number,
      pageSize?: number,
      pagination?: boolean,
      search?: string,
      startDatetimeAfter?: string,
      startDatetimeBefore?: string,
      status?: Array<AdminRequestsListStatusEnum>,
      options?: any,
    ): AxiosPromise<PaginatedRequestAdminListList> {
      return localVarFp
        .adminRequestsList(
          deadlineAfter,
          deadlineBefore,
          ordering,
          page,
          pageSize,
          pagination,
          search,
          startDatetimeAfter,
          startDatetimeBefore,
          status,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {PatchedRequestAdminUpdateRequest} [patchedRequestAdminUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsPartialUpdate(
      id: number,
      patchedRequestAdminUpdateRequest?: PatchedRequestAdminUpdateRequest,
      options?: any,
    ): AxiosPromise<RequestAdminRetrieve> {
      return localVarFp
        .adminRequestsPartialUpdate(
          id,
          patchedRequestAdminUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsRetrieve(
      id: number,
      options?: any,
    ): AxiosPromise<RequestAdminRetrieve> {
      return localVarFp
        .adminRequestsRetrieve(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {RequestAdminUpdateRequest} requestAdminUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsUpdate(
      id: number,
      requestAdminUpdateRequest: RequestAdminUpdateRequest,
      options?: any,
    ): AxiosPromise<RequestAdminRetrieve> {
      return localVarFp
        .adminRequestsUpdate(id, requestAdminUpdateRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} requestId
     * @param {VideoAdminCreateUpdateRequest} videoAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosCreate(
      requestId: number,
      videoAdminCreateUpdateRequest: VideoAdminCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<VideoAdminRetrieve> {
      return localVarFp
        .adminRequestsVideosCreate(
          requestId,
          videoAdminCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosDestroy(
      id: number,
      requestId: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .adminRequestsVideosDestroy(id, requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosHistoryList(
      id: number,
      requestId: number,
      options?: any,
    ): AxiosPromise<Array<History>> {
      return localVarFp
        .adminRequestsVideosHistoryList(id, requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} requestId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosList(
      requestId: number,
      ordering?: string,
      options?: any,
    ): AxiosPromise<Array<VideoAdminList>> {
      return localVarFp
        .adminRequestsVideosList(requestId, ordering, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {PatchedVideoAdminCreateUpdateRequest} [patchedVideoAdminCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosPartialUpdate(
      id: number,
      requestId: number,
      patchedVideoAdminCreateUpdateRequest?: PatchedVideoAdminCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<VideoAdminRetrieve> {
      return localVarFp
        .adminRequestsVideosPartialUpdate(
          id,
          requestId,
          patchedVideoAdminCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {RatingAdminCreateUpdateRequest} ratingAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRatingsCreate(
      requestId: number,
      videoId: number,
      ratingAdminCreateUpdateRequest: RatingAdminCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<RatingAdminCreateUpdate> {
      return localVarFp
        .adminRequestsVideosRatingsCreate(
          requestId,
          videoId,
          ratingAdminCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this rating.
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRatingsDestroy(
      id: number,
      requestId: number,
      videoId: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .adminRequestsVideosRatingsDestroy(id, requestId, videoId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this rating.
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRatingsHistoryList(
      id: number,
      requestId: number,
      videoId: number,
      options?: any,
    ): AxiosPromise<Array<History>> {
      return localVarFp
        .adminRequestsVideosRatingsHistoryList(id, requestId, videoId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRatingsList(
      requestId: number,
      videoId: number,
      ordering?: string,
      options?: any,
    ): AxiosPromise<Array<RatingAdminListRetrieve>> {
      return localVarFp
        .adminRequestsVideosRatingsList(requestId, videoId, ordering, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRatingsOwnRetrieve(
      requestId: number,
      videoId: number,
      options?: any,
    ): AxiosPromise<RatingAdminListRetrieve> {
      return localVarFp
        .adminRequestsVideosRatingsOwnRetrieve(requestId, videoId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this rating.
     * @param {number} requestId
     * @param {number} videoId
     * @param {PatchedRatingAdminCreateUpdateRequest} [patchedRatingAdminCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRatingsPartialUpdate(
      id: number,
      requestId: number,
      videoId: number,
      patchedRatingAdminCreateUpdateRequest?: PatchedRatingAdminCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<RatingAdminCreateUpdate> {
      return localVarFp
        .adminRequestsVideosRatingsPartialUpdate(
          id,
          requestId,
          videoId,
          patchedRatingAdminCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this rating.
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRatingsRetrieve(
      id: number,
      requestId: number,
      videoId: number,
      options?: any,
    ): AxiosPromise<RatingAdminListRetrieve> {
      return localVarFp
        .adminRequestsVideosRatingsRetrieve(id, requestId, videoId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this rating.
     * @param {number} requestId
     * @param {number} videoId
     * @param {RatingAdminCreateUpdateRequest} ratingAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRatingsUpdate(
      id: number,
      requestId: number,
      videoId: number,
      ratingAdminCreateUpdateRequest: RatingAdminCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<RatingAdminCreateUpdate> {
      return localVarFp
        .adminRequestsVideosRatingsUpdate(
          id,
          requestId,
          videoId,
          ratingAdminCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosRetrieve(
      id: number,
      requestId: number,
      options?: any,
    ): AxiosPromise<VideoAdminRetrieve> {
      return localVarFp
        .adminRequestsVideosRetrieve(id, requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {VideoAdminCreateUpdateRequest} videoAdminCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRequestsVideosUpdate(
      id: number,
      requestId: number,
      videoAdminCreateUpdateRequest: VideoAdminCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<VideoAdminRetrieve> {
      return localVarFp
        .adminRequestsVideosUpdate(
          id,
          requestId,
          videoAdminCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {BanUserRequest} [banUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersBanCreate(
      id: number,
      banUserRequest?: BanUserRequest,
      options?: any,
    ): AxiosPromise<BanUser> {
      return localVarFp
        .adminUsersBanCreate(id, banUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersBanDestroy(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .adminUsersBanDestroy(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {boolean} [isAdmin]
     * @param {boolean} [isStaff]
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {boolean} [pagination] Return paginated response.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersList(
      isAdmin?: boolean,
      isStaff?: boolean,
      ordering?: string,
      page?: number,
      pageSize?: number,
      pagination?: boolean,
      search?: string,
      options?: any,
    ): AxiosPromise<PaginatedUserAdminListList> {
      return localVarFp
        .adminUsersList(
          isAdmin,
          isStaff,
          ordering,
          page,
          pageSize,
          pagination,
          search,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {PatchedUserAdminDetailRequest} [patchedUserAdminDetailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersPartialUpdate(
      id: number,
      patchedUserAdminDetailRequest?: PatchedUserAdminDetailRequest,
      options?: any,
    ): AxiosPromise<UserAdminDetail> {
      return localVarFp
        .adminUsersPartialUpdate(id, patchedUserAdminDetailRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersRetrieve(
      id: number,
      options?: any,
    ): AxiosPromise<UserAdminDetail> {
      return localVarFp
        .adminUsersRetrieve(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {UserAdminDetailRequest} userAdminDetailRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersUpdate(
      id: number,
      userAdminDetailRequest: UserAdminDetailRequest,
      options?: any,
    ): AxiosPromise<UserAdminDetail> {
      return localVarFp
        .adminUsersUpdate(id, userAdminDetailRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this user.
     * @param {boolean} [isResponsible] Default is True.
     * @param {string} [startDatetimeAfter] Default is 20 weeks before start_datetime_before.
     * @param {string} [startDatetimeBefore] Default is today.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersWorkedOnList(
      id: number,
      isResponsible?: boolean,
      startDatetimeAfter?: string,
      startDatetimeBefore?: string,
      options?: any,
    ): AxiosPromise<Array<UserAdminWorkedOn>> {
      return localVarFp
        .adminUsersWorkedOnList(
          id,
          isResponsible,
          startDatetimeAfter,
          startDatetimeBefore,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [lastAired]
     * @param {number} [lengthMax]
     * @param {number} [lengthMin]
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {boolean} [pagination] Return paginated response.
     * @param {string} [requestStartDatetimeAfter]
     * @param {string} [requestStartDatetimeBefore]
     * @param {string} [search] A search term.
     * @param {Array<AdminVideosListStatusEnum>} [status] * &#x60;1&#x60; - Vágásra vár * &#x60;2&#x60; - Vágás alatt * &#x60;3&#x60; - Megvágva * &#x60;4&#x60; - Kikódolva * &#x60;5&#x60; - Közzétéve * &#x60;6&#x60; - Lezárva
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminVideosList(
      lastAired?: string,
      lengthMax?: number,
      lengthMin?: number,
      ordering?: string,
      page?: number,
      pageSize?: number,
      pagination?: boolean,
      requestStartDatetimeAfter?: string,
      requestStartDatetimeBefore?: string,
      search?: string,
      status?: Array<AdminVideosListStatusEnum>,
      options?: any,
    ): AxiosPromise<PaginatedVideoAdminSearchList> {
      return localVarFp
        .adminVideosList(
          lastAired,
          lengthMax,
          lengthMin,
          ordering,
          page,
          pageSize,
          pagination,
          requestStartDatetimeAfter,
          requestStartDatetimeBefore,
          search,
          status,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
  /**
   *
   * @param {number} requestId
   * @param {CommentAdminCreateUpdateRequest} commentAdminCreateUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsCommentsCreate(
    requestId: number,
    commentAdminCreateUpdateRequest: CommentAdminCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsCommentsCreate(
        requestId,
        commentAdminCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this comment.
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsCommentsDestroy(
    id: number,
    requestId: number,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsCommentsDestroy(id, requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this comment.
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsCommentsHistoryList(
    id: number,
    requestId: number,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsCommentsHistoryList(id, requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} requestId
   * @param {string} [ordering] Which field to use when ordering the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsCommentsList(
    requestId: number,
    ordering?: string,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsCommentsList(requestId, ordering, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this comment.
   * @param {number} requestId
   * @param {PatchedCommentAdminCreateUpdateRequest} [patchedCommentAdminCreateUpdateRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsCommentsPartialUpdate(
    id: number,
    requestId: number,
    patchedCommentAdminCreateUpdateRequest?: PatchedCommentAdminCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsCommentsPartialUpdate(
        id,
        requestId,
        patchedCommentAdminCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this comment.
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsCommentsRetrieve(
    id: number,
    requestId: number,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsCommentsRetrieve(id, requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this comment.
   * @param {number} requestId
   * @param {CommentAdminCreateUpdateRequest} commentAdminCreateUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsCommentsUpdate(
    id: number,
    requestId: number,
    commentAdminCreateUpdateRequest: CommentAdminCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsCommentsUpdate(
        id,
        requestId,
        commentAdminCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RequestAdminCreateRequest} requestAdminCreateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsCreate(
    requestAdminCreateRequest: RequestAdminCreateRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsCreate(requestAdminCreateRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} requestId
   * @param {CrewMemberAdminCreateUpdateRequest} crewMemberAdminCreateUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsCrewCreate(
    requestId: number,
    crewMemberAdminCreateUpdateRequest: CrewMemberAdminCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsCrewCreate(
        requestId,
        crewMemberAdminCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this crew member.
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsCrewDestroy(
    id: number,
    requestId: number,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsCrewDestroy(id, requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} requestId
   * @param {string} [ordering] Which field to use when ordering the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsCrewList(
    requestId: number,
    ordering?: string,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsCrewList(requestId, ordering, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this crew member.
   * @param {number} requestId
   * @param {PatchedCrewMemberAdminCreateUpdateRequest} [patchedCrewMemberAdminCreateUpdateRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsCrewPartialUpdate(
    id: number,
    requestId: number,
    patchedCrewMemberAdminCreateUpdateRequest?: PatchedCrewMemberAdminCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsCrewPartialUpdate(
        id,
        requestId,
        patchedCrewMemberAdminCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this crew member.
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsCrewRetrieve(
    id: number,
    requestId: number,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsCrewRetrieve(id, requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this crew member.
   * @param {number} requestId
   * @param {CrewMemberAdminCreateUpdateRequest} crewMemberAdminCreateUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsCrewUpdate(
    id: number,
    requestId: number,
    crewMemberAdminCreateUpdateRequest: CrewMemberAdminCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsCrewUpdate(
        id,
        requestId,
        crewMemberAdminCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this request.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsDestroy(id: number, options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .adminRequestsDestroy(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this request.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsHistoryList(id: number, options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .adminRequestsHistoryList(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [deadlineAfter]
   * @param {string} [deadlineBefore]
   * @param {string} [ordering] Which field to use when ordering the results.
   * @param {number} [page] A page number within the paginated result set.
   * @param {number} [pageSize] Number of results to return per page.
   * @param {boolean} [pagination] Return paginated response.
   * @param {string} [search] A search term.
   * @param {string} [startDatetimeAfter]
   * @param {string} [startDatetimeBefore]
   * @param {Array<AdminRequestsListStatusEnum>} [status] * &#x60;0&#x60; - Elutasítva * &#x60;1&#x60; - Felkérés * &#x60;2&#x60; - Elvállalva * &#x60;3&#x60; - Leforgatva * &#x60;4&#x60; - Beírva * &#x60;5&#x60; - Megvágva * &#x60;6&#x60; - Archiválva * &#x60;7&#x60; - Lezárva * &#x60;9&#x60; - Szervezők által lemondva * &#x60;10&#x60; - Meghiúsult
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsList(
    deadlineAfter?: string,
    deadlineBefore?: string,
    ordering?: string,
    page?: number,
    pageSize?: number,
    pagination?: boolean,
    search?: string,
    startDatetimeAfter?: string,
    startDatetimeBefore?: string,
    status?: Array<AdminRequestsListStatusEnum>,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsList(
        deadlineAfter,
        deadlineBefore,
        ordering,
        page,
        pageSize,
        pagination,
        search,
        startDatetimeAfter,
        startDatetimeBefore,
        status,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this request.
   * @param {PatchedRequestAdminUpdateRequest} [patchedRequestAdminUpdateRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsPartialUpdate(
    id: number,
    patchedRequestAdminUpdateRequest?: PatchedRequestAdminUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsPartialUpdate(id, patchedRequestAdminUpdateRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this request.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsRetrieve(id: number, options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .adminRequestsRetrieve(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this request.
   * @param {RequestAdminUpdateRequest} requestAdminUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsUpdate(
    id: number,
    requestAdminUpdateRequest: RequestAdminUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsUpdate(id, requestAdminUpdateRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} requestId
   * @param {VideoAdminCreateUpdateRequest} videoAdminCreateUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsVideosCreate(
    requestId: number,
    videoAdminCreateUpdateRequest: VideoAdminCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsVideosCreate(
        requestId,
        videoAdminCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this video.
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsVideosDestroy(
    id: number,
    requestId: number,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsVideosDestroy(id, requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this video.
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsVideosHistoryList(
    id: number,
    requestId: number,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsVideosHistoryList(id, requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} requestId
   * @param {string} [ordering] Which field to use when ordering the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsVideosList(
    requestId: number,
    ordering?: string,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsVideosList(requestId, ordering, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this video.
   * @param {number} requestId
   * @param {PatchedVideoAdminCreateUpdateRequest} [patchedVideoAdminCreateUpdateRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsVideosPartialUpdate(
    id: number,
    requestId: number,
    patchedVideoAdminCreateUpdateRequest?: PatchedVideoAdminCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsVideosPartialUpdate(
        id,
        requestId,
        patchedVideoAdminCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} requestId
   * @param {number} videoId
   * @param {RatingAdminCreateUpdateRequest} ratingAdminCreateUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsVideosRatingsCreate(
    requestId: number,
    videoId: number,
    ratingAdminCreateUpdateRequest: RatingAdminCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsVideosRatingsCreate(
        requestId,
        videoId,
        ratingAdminCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this rating.
   * @param {number} requestId
   * @param {number} videoId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsVideosRatingsDestroy(
    id: number,
    requestId: number,
    videoId: number,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsVideosRatingsDestroy(id, requestId, videoId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this rating.
   * @param {number} requestId
   * @param {number} videoId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsVideosRatingsHistoryList(
    id: number,
    requestId: number,
    videoId: number,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsVideosRatingsHistoryList(id, requestId, videoId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} requestId
   * @param {number} videoId
   * @param {string} [ordering] Which field to use when ordering the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsVideosRatingsList(
    requestId: number,
    videoId: number,
    ordering?: string,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsVideosRatingsList(requestId, videoId, ordering, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} requestId
   * @param {number} videoId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsVideosRatingsOwnRetrieve(
    requestId: number,
    videoId: number,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsVideosRatingsOwnRetrieve(requestId, videoId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this rating.
   * @param {number} requestId
   * @param {number} videoId
   * @param {PatchedRatingAdminCreateUpdateRequest} [patchedRatingAdminCreateUpdateRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsVideosRatingsPartialUpdate(
    id: number,
    requestId: number,
    videoId: number,
    patchedRatingAdminCreateUpdateRequest?: PatchedRatingAdminCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsVideosRatingsPartialUpdate(
        id,
        requestId,
        videoId,
        patchedRatingAdminCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this rating.
   * @param {number} requestId
   * @param {number} videoId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsVideosRatingsRetrieve(
    id: number,
    requestId: number,
    videoId: number,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsVideosRatingsRetrieve(id, requestId, videoId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this rating.
   * @param {number} requestId
   * @param {number} videoId
   * @param {RatingAdminCreateUpdateRequest} ratingAdminCreateUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsVideosRatingsUpdate(
    id: number,
    requestId: number,
    videoId: number,
    ratingAdminCreateUpdateRequest: RatingAdminCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsVideosRatingsUpdate(
        id,
        requestId,
        videoId,
        ratingAdminCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this video.
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsVideosRetrieve(
    id: number,
    requestId: number,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsVideosRetrieve(id, requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this video.
   * @param {number} requestId
   * @param {VideoAdminCreateUpdateRequest} videoAdminCreateUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminRequestsVideosUpdate(
    id: number,
    requestId: number,
    videoAdminCreateUpdateRequest: VideoAdminCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminRequestsVideosUpdate(
        id,
        requestId,
        videoAdminCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this user.
   * @param {BanUserRequest} [banUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminUsersBanCreate(
    id: number,
    banUserRequest?: BanUserRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminUsersBanCreate(id, banUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this user.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminUsersBanDestroy(id: number, options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .adminUsersBanDestroy(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {boolean} [isAdmin]
   * @param {boolean} [isStaff]
   * @param {string} [ordering] Which field to use when ordering the results.
   * @param {number} [page] A page number within the paginated result set.
   * @param {number} [pageSize] Number of results to return per page.
   * @param {boolean} [pagination] Return paginated response.
   * @param {string} [search] A search term.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminUsersList(
    isAdmin?: boolean,
    isStaff?: boolean,
    ordering?: string,
    page?: number,
    pageSize?: number,
    pagination?: boolean,
    search?: string,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminUsersList(
        isAdmin,
        isStaff,
        ordering,
        page,
        pageSize,
        pagination,
        search,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this user.
   * @param {PatchedUserAdminDetailRequest} [patchedUserAdminDetailRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminUsersPartialUpdate(
    id: number,
    patchedUserAdminDetailRequest?: PatchedUserAdminDetailRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminUsersPartialUpdate(id, patchedUserAdminDetailRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this user.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminUsersRetrieve(id: number, options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .adminUsersRetrieve(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this user.
   * @param {UserAdminDetailRequest} userAdminDetailRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminUsersUpdate(
    id: number,
    userAdminDetailRequest: UserAdminDetailRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminUsersUpdate(id, userAdminDetailRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this user.
   * @param {boolean} [isResponsible] Default is True.
   * @param {string} [startDatetimeAfter] Default is 20 weeks before start_datetime_before.
   * @param {string} [startDatetimeBefore] Default is today.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminUsersWorkedOnList(
    id: number,
    isResponsible?: boolean,
    startDatetimeAfter?: string,
    startDatetimeBefore?: string,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminUsersWorkedOnList(
        id,
        isResponsible,
        startDatetimeAfter,
        startDatetimeBefore,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [lastAired]
   * @param {number} [lengthMax]
   * @param {number} [lengthMin]
   * @param {string} [ordering] Which field to use when ordering the results.
   * @param {number} [page] A page number within the paginated result set.
   * @param {number} [pageSize] Number of results to return per page.
   * @param {boolean} [pagination] Return paginated response.
   * @param {string} [requestStartDatetimeAfter]
   * @param {string} [requestStartDatetimeBefore]
   * @param {string} [search] A search term.
   * @param {Array<AdminVideosListStatusEnum>} [status] * &#x60;1&#x60; - Vágásra vár * &#x60;2&#x60; - Vágás alatt * &#x60;3&#x60; - Megvágva * &#x60;4&#x60; - Kikódolva * &#x60;5&#x60; - Közzétéve * &#x60;6&#x60; - Lezárva
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public adminVideosList(
    lastAired?: string,
    lengthMax?: number,
    lengthMin?: number,
    ordering?: string,
    page?: number,
    pageSize?: number,
    pagination?: boolean,
    requestStartDatetimeAfter?: string,
    requestStartDatetimeBefore?: string,
    search?: string,
    status?: Array<AdminVideosListStatusEnum>,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .adminVideosList(
        lastAired,
        lengthMax,
        lengthMin,
        ordering,
        page,
        pageSize,
        pagination,
        requestStartDatetimeAfter,
        requestStartDatetimeBefore,
        search,
        status,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const AdminRequestsListStatusEnum = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_10: 10,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_9: 9,
} as const;
export type AdminRequestsListStatusEnum =
  (typeof AdminRequestsListStatusEnum)[keyof typeof AdminRequestsListStatusEnum];
/**
 * @export
 */
export const AdminVideosListStatusEnum = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
} as const;
export type AdminVideosListStatusEnum =
  (typeof AdminVideosListStatusEnum)[keyof typeof AdminVideosListStatusEnum];
