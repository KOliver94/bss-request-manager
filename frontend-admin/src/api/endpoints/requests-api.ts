/* tslint:disable */
/* eslint-disable */
/**
 * BSS Request Manager API
 * REST API for Workflow Support System for managing video shooting, filming and live streaming requests of Budavári Schönherz Stúdió.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kecskemety.oliver@simonyi.bme.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { CommentCreateUpdate } from '../models';
// @ts-ignore
import { CommentCreateUpdateRequest } from '../models';
// @ts-ignore
import { CommentListRetrieve } from '../models';
// @ts-ignore
import { PaginatedRequestListList } from '../models';
// @ts-ignore
import { PatchedCommentCreateUpdateRequest } from '../models';
// @ts-ignore
import { PatchedRatingCreateUpdateRequest } from '../models';
// @ts-ignore
import { PolymorphicProxyRequest } from '../models';
// @ts-ignore
import { RatingCreateUpdate } from '../models';
// @ts-ignore
import { RatingCreateUpdateRequest } from '../models';
// @ts-ignore
import { RatingRetrieve } from '../models';
// @ts-ignore
import { RequestRetrieve } from '../models';
// @ts-ignore
import { VideoListRetrieve } from '../models';
/**
 * RequestsApi - axios parameter creator
 * @export
 */
export const RequestsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {number} requestId
     * @param {CommentCreateUpdateRequest} commentCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsCommentsCreate: async (
      requestId: number,
      commentCreateUpdateRequest: CommentCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('requestsCommentsCreate', 'requestId', requestId);
      // verify required parameter 'commentCreateUpdateRequest' is not null or undefined
      assertParamExists(
        'requestsCommentsCreate',
        'commentCreateUpdateRequest',
        commentCreateUpdateRequest,
      );
      const localVarPath = `/api/v1/requests/{request_id}/comments`.replace(
        `{${'request_id'}}`,
        encodeURIComponent(String(requestId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        commentCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsCommentsDestroy: async (
      id: number,
      requestId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('requestsCommentsDestroy', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('requestsCommentsDestroy', 'requestId', requestId);
      const localVarPath = `/api/v1/requests/{request_id}/comments/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} requestId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsCommentsList: async (
      requestId: number,
      ordering?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('requestsCommentsList', 'requestId', requestId);
      const localVarPath = `/api/v1/requests/{request_id}/comments`.replace(
        `{${'request_id'}}`,
        encodeURIComponent(String(requestId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (ordering !== undefined) {
        localVarQueryParameter['ordering'] = ordering;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {PatchedCommentCreateUpdateRequest} [patchedCommentCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsCommentsPartialUpdate: async (
      id: number,
      requestId: number,
      patchedCommentCreateUpdateRequest?: PatchedCommentCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('requestsCommentsPartialUpdate', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists(
        'requestsCommentsPartialUpdate',
        'requestId',
        requestId,
      );
      const localVarPath = `/api/v1/requests/{request_id}/comments/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedCommentCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsCommentsRetrieve: async (
      id: number,
      requestId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('requestsCommentsRetrieve', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('requestsCommentsRetrieve', 'requestId', requestId);
      const localVarPath = `/api/v1/requests/{request_id}/comments/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {CommentCreateUpdateRequest} commentCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsCommentsUpdate: async (
      id: number,
      requestId: number,
      commentCreateUpdateRequest: CommentCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('requestsCommentsUpdate', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('requestsCommentsUpdate', 'requestId', requestId);
      // verify required parameter 'commentCreateUpdateRequest' is not null or undefined
      assertParamExists(
        'requestsCommentsUpdate',
        'commentCreateUpdateRequest',
        commentCreateUpdateRequest,
      );
      const localVarPath = `/api/v1/requests/{request_id}/comments/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        commentCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PolymorphicProxyRequest} [polymorphicProxyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsCreate: async (
      polymorphicProxyRequest?: PolymorphicProxyRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/requests`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        polymorphicProxyRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {boolean} [pagination] Return paginated response.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsList: async (
      ordering?: string,
      page?: number,
      pageSize?: number,
      pagination?: boolean,
      search?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/requests`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (ordering !== undefined) {
        localVarQueryParameter['ordering'] = ordering;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['page_size'] = pageSize;
      }

      if (pagination !== undefined) {
        localVarQueryParameter['pagination'] = pagination;
      }

      if (search !== undefined) {
        localVarQueryParameter['search'] = search;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('requestsRetrieve', 'id', id);
      const localVarPath = `/api/v1/requests/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} requestId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsVideosList: async (
      requestId: number,
      ordering?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('requestsVideosList', 'requestId', requestId);
      const localVarPath = `/api/v1/requests/{request_id}/videos`.replace(
        `{${'request_id'}}`,
        encodeURIComponent(String(requestId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (ordering !== undefined) {
        localVarQueryParameter['ordering'] = ordering;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {RatingCreateUpdateRequest} ratingCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsVideosRatingCreate: async (
      requestId: number,
      videoId: number,
      ratingCreateUpdateRequest: RatingCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('requestsVideosRatingCreate', 'requestId', requestId);
      // verify required parameter 'videoId' is not null or undefined
      assertParamExists('requestsVideosRatingCreate', 'videoId', videoId);
      // verify required parameter 'ratingCreateUpdateRequest' is not null or undefined
      assertParamExists(
        'requestsVideosRatingCreate',
        'ratingCreateUpdateRequest',
        ratingCreateUpdateRequest,
      );
      const localVarPath =
        `/api/v1/requests/{request_id}/videos/{video_id}/rating`
          .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)))
          .replace(`{${'video_id'}}`, encodeURIComponent(String(videoId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        ratingCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsVideosRatingDestroy: async (
      requestId: number,
      videoId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('requestsVideosRatingDestroy', 'requestId', requestId);
      // verify required parameter 'videoId' is not null or undefined
      assertParamExists('requestsVideosRatingDestroy', 'videoId', videoId);
      const localVarPath =
        `/api/v1/requests/{request_id}/videos/{video_id}/rating`
          .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)))
          .replace(`{${'video_id'}}`, encodeURIComponent(String(videoId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {PatchedRatingCreateUpdateRequest} [patchedRatingCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsVideosRatingPartialUpdate: async (
      requestId: number,
      videoId: number,
      patchedRatingCreateUpdateRequest?: PatchedRatingCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists(
        'requestsVideosRatingPartialUpdate',
        'requestId',
        requestId,
      );
      // verify required parameter 'videoId' is not null or undefined
      assertParamExists(
        'requestsVideosRatingPartialUpdate',
        'videoId',
        videoId,
      );
      const localVarPath =
        `/api/v1/requests/{request_id}/videos/{video_id}/rating`
          .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)))
          .replace(`{${'video_id'}}`, encodeURIComponent(String(videoId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedRatingCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsVideosRatingRetrieve: async (
      requestId: number,
      videoId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('requestsVideosRatingRetrieve', 'requestId', requestId);
      // verify required parameter 'videoId' is not null or undefined
      assertParamExists('requestsVideosRatingRetrieve', 'videoId', videoId);
      const localVarPath =
        `/api/v1/requests/{request_id}/videos/{video_id}/rating`
          .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)))
          .replace(`{${'video_id'}}`, encodeURIComponent(String(videoId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {RatingCreateUpdateRequest} ratingCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsVideosRatingUpdate: async (
      requestId: number,
      videoId: number,
      ratingCreateUpdateRequest: RatingCreateUpdateRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('requestsVideosRatingUpdate', 'requestId', requestId);
      // verify required parameter 'videoId' is not null or undefined
      assertParamExists('requestsVideosRatingUpdate', 'videoId', videoId);
      // verify required parameter 'ratingCreateUpdateRequest' is not null or undefined
      assertParamExists(
        'requestsVideosRatingUpdate',
        'ratingCreateUpdateRequest',
        ratingCreateUpdateRequest,
      );
      const localVarPath =
        `/api/v1/requests/{request_id}/videos/{video_id}/rating`
          .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)))
          .replace(`{${'video_id'}}`, encodeURIComponent(String(videoId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        ratingCreateUpdateRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsVideosRetrieve: async (
      id: number,
      requestId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('requestsVideosRetrieve', 'id', id);
      // verify required parameter 'requestId' is not null or undefined
      assertParamExists('requestsVideosRetrieve', 'requestId', requestId);
      const localVarPath = `/api/v1/requests/{request_id}/videos/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'request_id'}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication tokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      );

      // authentication jwtAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RequestsApi - functional programming interface
 * @export
 */
export const RequestsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RequestsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} requestId
     * @param {CommentCreateUpdateRequest} commentCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestsCommentsCreate(
      requestId: number,
      commentCreateUpdateRequest: CommentCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CommentCreateUpdate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.requestsCommentsCreate(
          requestId,
          commentCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestsCommentsDestroy(
      id: number,
      requestId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.requestsCommentsDestroy(
          id,
          requestId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} requestId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestsCommentsList(
      requestId: number,
      ordering?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<CommentListRetrieve>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.requestsCommentsList(
          requestId,
          ordering,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {PatchedCommentCreateUpdateRequest} [patchedCommentCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestsCommentsPartialUpdate(
      id: number,
      requestId: number,
      patchedCommentCreateUpdateRequest?: PatchedCommentCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CommentCreateUpdate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.requestsCommentsPartialUpdate(
          id,
          requestId,
          patchedCommentCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestsCommentsRetrieve(
      id: number,
      requestId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CommentListRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.requestsCommentsRetrieve(
          id,
          requestId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {CommentCreateUpdateRequest} commentCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestsCommentsUpdate(
      id: number,
      requestId: number,
      commentCreateUpdateRequest: CommentCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CommentCreateUpdate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.requestsCommentsUpdate(
          id,
          requestId,
          commentCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {PolymorphicProxyRequest} [polymorphicProxyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestsCreate(
      polymorphicProxyRequest?: PolymorphicProxyRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RequestRetrieve>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.requestsCreate(
        polymorphicProxyRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {boolean} [pagination] Return paginated response.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestsList(
      ordering?: string,
      page?: number,
      pageSize?: number,
      pagination?: boolean,
      search?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedRequestListList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.requestsList(
        ordering,
        page,
        pageSize,
        pagination,
        search,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestsRetrieve(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RequestRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.requestsRetrieve(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} requestId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestsVideosList(
      requestId: number,
      ordering?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<VideoListRetrieve>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.requestsVideosList(
          requestId,
          ordering,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {RatingCreateUpdateRequest} ratingCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestsVideosRatingCreate(
      requestId: number,
      videoId: number,
      ratingCreateUpdateRequest: RatingCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RatingCreateUpdate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.requestsVideosRatingCreate(
          requestId,
          videoId,
          ratingCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestsVideosRatingDestroy(
      requestId: number,
      videoId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.requestsVideosRatingDestroy(
          requestId,
          videoId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {PatchedRatingCreateUpdateRequest} [patchedRatingCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestsVideosRatingPartialUpdate(
      requestId: number,
      videoId: number,
      patchedRatingCreateUpdateRequest?: PatchedRatingCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RatingCreateUpdate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.requestsVideosRatingPartialUpdate(
          requestId,
          videoId,
          patchedRatingCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestsVideosRatingRetrieve(
      requestId: number,
      videoId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RatingRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.requestsVideosRatingRetrieve(
          requestId,
          videoId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {RatingCreateUpdateRequest} ratingCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestsVideosRatingUpdate(
      requestId: number,
      videoId: number,
      ratingCreateUpdateRequest: RatingCreateUpdateRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RatingCreateUpdate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.requestsVideosRatingUpdate(
          requestId,
          videoId,
          ratingCreateUpdateRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestsVideosRetrieve(
      id: number,
      requestId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<VideoListRetrieve>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.requestsVideosRetrieve(
          id,
          requestId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * RequestsApi - factory interface
 * @export
 */
export const RequestsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = RequestsApiFp(configuration);
  return {
    /**
     *
     * @param {number} requestId
     * @param {CommentCreateUpdateRequest} commentCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsCommentsCreate(
      requestId: number,
      commentCreateUpdateRequest: CommentCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<CommentCreateUpdate> {
      return localVarFp
        .requestsCommentsCreate(requestId, commentCreateUpdateRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsCommentsDestroy(
      id: number,
      requestId: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .requestsCommentsDestroy(id, requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} requestId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsCommentsList(
      requestId: number,
      ordering?: string,
      options?: any,
    ): AxiosPromise<Array<CommentListRetrieve>> {
      return localVarFp
        .requestsCommentsList(requestId, ordering, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {PatchedCommentCreateUpdateRequest} [patchedCommentCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsCommentsPartialUpdate(
      id: number,
      requestId: number,
      patchedCommentCreateUpdateRequest?: PatchedCommentCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<CommentCreateUpdate> {
      return localVarFp
        .requestsCommentsPartialUpdate(
          id,
          requestId,
          patchedCommentCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsCommentsRetrieve(
      id: number,
      requestId: number,
      options?: any,
    ): AxiosPromise<CommentListRetrieve> {
      return localVarFp
        .requestsCommentsRetrieve(id, requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this comment.
     * @param {number} requestId
     * @param {CommentCreateUpdateRequest} commentCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsCommentsUpdate(
      id: number,
      requestId: number,
      commentCreateUpdateRequest: CommentCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<CommentCreateUpdate> {
      return localVarFp
        .requestsCommentsUpdate(
          id,
          requestId,
          commentCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {PolymorphicProxyRequest} [polymorphicProxyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsCreate(
      polymorphicProxyRequest?: PolymorphicProxyRequest,
      options?: any,
    ): AxiosPromise<RequestRetrieve> {
      return localVarFp
        .requestsCreate(polymorphicProxyRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {boolean} [pagination] Return paginated response.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsList(
      ordering?: string,
      page?: number,
      pageSize?: number,
      pagination?: boolean,
      search?: string,
      options?: any,
    ): AxiosPromise<PaginatedRequestListList> {
      return localVarFp
        .requestsList(ordering, page, pageSize, pagination, search, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsRetrieve(id: number, options?: any): AxiosPromise<RequestRetrieve> {
      return localVarFp
        .requestsRetrieve(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} requestId
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsVideosList(
      requestId: number,
      ordering?: string,
      options?: any,
    ): AxiosPromise<Array<VideoListRetrieve>> {
      return localVarFp
        .requestsVideosList(requestId, ordering, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {RatingCreateUpdateRequest} ratingCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsVideosRatingCreate(
      requestId: number,
      videoId: number,
      ratingCreateUpdateRequest: RatingCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<RatingCreateUpdate> {
      return localVarFp
        .requestsVideosRatingCreate(
          requestId,
          videoId,
          ratingCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsVideosRatingDestroy(
      requestId: number,
      videoId: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .requestsVideosRatingDestroy(requestId, videoId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {PatchedRatingCreateUpdateRequest} [patchedRatingCreateUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsVideosRatingPartialUpdate(
      requestId: number,
      videoId: number,
      patchedRatingCreateUpdateRequest?: PatchedRatingCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<RatingCreateUpdate> {
      return localVarFp
        .requestsVideosRatingPartialUpdate(
          requestId,
          videoId,
          patchedRatingCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsVideosRatingRetrieve(
      requestId: number,
      videoId: number,
      options?: any,
    ): AxiosPromise<RatingRetrieve> {
      return localVarFp
        .requestsVideosRatingRetrieve(requestId, videoId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} requestId
     * @param {number} videoId
     * @param {RatingCreateUpdateRequest} ratingCreateUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsVideosRatingUpdate(
      requestId: number,
      videoId: number,
      ratingCreateUpdateRequest: RatingCreateUpdateRequest,
      options?: any,
    ): AxiosPromise<RatingCreateUpdate> {
      return localVarFp
        .requestsVideosRatingUpdate(
          requestId,
          videoId,
          ratingCreateUpdateRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id A unique integer value identifying this video.
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestsVideosRetrieve(
      id: number,
      requestId: number,
      options?: any,
    ): AxiosPromise<VideoListRetrieve> {
      return localVarFp
        .requestsVideosRetrieve(id, requestId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RequestsApi - object-oriented interface
 * @export
 * @class RequestsApi
 * @extends {BaseAPI}
 */
export class RequestsApi extends BaseAPI {
  /**
   *
   * @param {number} requestId
   * @param {CommentCreateUpdateRequest} commentCreateUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public requestsCommentsCreate(
    requestId: number,
    commentCreateUpdateRequest: CommentCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return RequestsApiFp(this.configuration)
      .requestsCommentsCreate(requestId, commentCreateUpdateRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this comment.
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public requestsCommentsDestroy(
    id: number,
    requestId: number,
    options?: AxiosRequestConfig,
  ) {
    return RequestsApiFp(this.configuration)
      .requestsCommentsDestroy(id, requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} requestId
   * @param {string} [ordering] Which field to use when ordering the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public requestsCommentsList(
    requestId: number,
    ordering?: string,
    options?: AxiosRequestConfig,
  ) {
    return RequestsApiFp(this.configuration)
      .requestsCommentsList(requestId, ordering, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this comment.
   * @param {number} requestId
   * @param {PatchedCommentCreateUpdateRequest} [patchedCommentCreateUpdateRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public requestsCommentsPartialUpdate(
    id: number,
    requestId: number,
    patchedCommentCreateUpdateRequest?: PatchedCommentCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return RequestsApiFp(this.configuration)
      .requestsCommentsPartialUpdate(
        id,
        requestId,
        patchedCommentCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this comment.
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public requestsCommentsRetrieve(
    id: number,
    requestId: number,
    options?: AxiosRequestConfig,
  ) {
    return RequestsApiFp(this.configuration)
      .requestsCommentsRetrieve(id, requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this comment.
   * @param {number} requestId
   * @param {CommentCreateUpdateRequest} commentCreateUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public requestsCommentsUpdate(
    id: number,
    requestId: number,
    commentCreateUpdateRequest: CommentCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return RequestsApiFp(this.configuration)
      .requestsCommentsUpdate(
        id,
        requestId,
        commentCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PolymorphicProxyRequest} [polymorphicProxyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public requestsCreate(
    polymorphicProxyRequest?: PolymorphicProxyRequest,
    options?: AxiosRequestConfig,
  ) {
    return RequestsApiFp(this.configuration)
      .requestsCreate(polymorphicProxyRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [ordering] Which field to use when ordering the results.
   * @param {number} [page] A page number within the paginated result set.
   * @param {number} [pageSize] Number of results to return per page.
   * @param {boolean} [pagination] Return paginated response.
   * @param {string} [search] A search term.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public requestsList(
    ordering?: string,
    page?: number,
    pageSize?: number,
    pagination?: boolean,
    search?: string,
    options?: AxiosRequestConfig,
  ) {
    return RequestsApiFp(this.configuration)
      .requestsList(ordering, page, pageSize, pagination, search, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this request.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public requestsRetrieve(id: number, options?: AxiosRequestConfig) {
    return RequestsApiFp(this.configuration)
      .requestsRetrieve(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} requestId
   * @param {string} [ordering] Which field to use when ordering the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public requestsVideosList(
    requestId: number,
    ordering?: string,
    options?: AxiosRequestConfig,
  ) {
    return RequestsApiFp(this.configuration)
      .requestsVideosList(requestId, ordering, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} requestId
   * @param {number} videoId
   * @param {RatingCreateUpdateRequest} ratingCreateUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public requestsVideosRatingCreate(
    requestId: number,
    videoId: number,
    ratingCreateUpdateRequest: RatingCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return RequestsApiFp(this.configuration)
      .requestsVideosRatingCreate(
        requestId,
        videoId,
        ratingCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} requestId
   * @param {number} videoId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public requestsVideosRatingDestroy(
    requestId: number,
    videoId: number,
    options?: AxiosRequestConfig,
  ) {
    return RequestsApiFp(this.configuration)
      .requestsVideosRatingDestroy(requestId, videoId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} requestId
   * @param {number} videoId
   * @param {PatchedRatingCreateUpdateRequest} [patchedRatingCreateUpdateRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public requestsVideosRatingPartialUpdate(
    requestId: number,
    videoId: number,
    patchedRatingCreateUpdateRequest?: PatchedRatingCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return RequestsApiFp(this.configuration)
      .requestsVideosRatingPartialUpdate(
        requestId,
        videoId,
        patchedRatingCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} requestId
   * @param {number} videoId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public requestsVideosRatingRetrieve(
    requestId: number,
    videoId: number,
    options?: AxiosRequestConfig,
  ) {
    return RequestsApiFp(this.configuration)
      .requestsVideosRatingRetrieve(requestId, videoId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} requestId
   * @param {number} videoId
   * @param {RatingCreateUpdateRequest} ratingCreateUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public requestsVideosRatingUpdate(
    requestId: number,
    videoId: number,
    ratingCreateUpdateRequest: RatingCreateUpdateRequest,
    options?: AxiosRequestConfig,
  ) {
    return RequestsApiFp(this.configuration)
      .requestsVideosRatingUpdate(
        requestId,
        videoId,
        ratingCreateUpdateRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id A unique integer value identifying this video.
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public requestsVideosRetrieve(
    id: number,
    requestId: number,
    options?: AxiosRequestConfig,
  ) {
    return RequestsApiFp(this.configuration)
      .requestsVideosRetrieve(id, requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
